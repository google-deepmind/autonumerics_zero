// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

edition = "2023";

package brain.evolution;

import "evolution/lib/fitnesses_reduction_spec.proto";

option features.repeated_field_encoding = EXPANDED;

message Nsga2SearchAlgorithmSpec {
  // The sizes of the parent and child populations. Individuals are sampled
  // from the parent population and sent to workers. Workers upload to the
  // child population. When the child population reaches the given size, it is
  // processed by NSGA-II to generate the next parent population. The larger
  // the child population relative to the parent population, the more selection
  // pressure.
  int64 child_population_size = 1;  // Required.

  // Specifies stages of selection.
  repeated Nsga2SelectionStageSpec stages = 2;  // Must be non-empty.

  // Whether to include the previous generation as candidates for selection.
  // Note that if not using elitism and the child and parent populations are
  // of equal size, this algorithm is effectively doing random search.
  bool use_elitism = 3;  // Required.

  // Whether to sort each frontier under crowding distance.
  bool use_crowding_distance_sorting = 4 [default = true];

  // If set, transforms the fitnesses.
  FitnessesReductionSpec fitnesses_reduction = 5;
}

message Nsga2SelectionStageSpec {
  // Add individuals to W until we run out of viable candidates or until W
  // reaches these many.
  int64 parent_population_size = 1;  // Required.

  // These limits define a region in fitness space. Only candidates within
  // the region will be considered in this stage. The index of these two
  // repeated fields corresponds to the fitness index (i.e. coordinate in
  // fitness space). If a limit is not set (empty repeated field), it is
  // considered to be satisfied by default. Min is inclusive, max is exclusive.
  repeated double min_fitnesses = 2;
  repeated double max_fitnesses = 3;
}
