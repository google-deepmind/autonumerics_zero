// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

// Error-related specs.

edition = "2023";

package brain.evolution.graphs.joy;

// Determines how to transform error into quality fitness.
message QualityFitnessSpec {
  oneof quality_fitness_type {
    // Useful when the error is measured relative to the full label.
    LogErrorQualityFitness log_error = 1;

    // A simpler objective that has minimal distortion of the error. Allows
    // keeping ULP measurements unmodified, but may need preprocessing when
    // plotting.
    MinusErrorQualityFitness minus_error = 2;
  }
}

// Process the loss into a fitness in a way that is sensitive to small values.
// Namely, the fitness is:
//   f = -log10(loss)                 if loss < 0.1
//       or
//     = flip_and_squash(loss - 0.1)  if loss > 0.1
message LogErrorQualityFitness {
  // Clip the output at `max` to avoid the infinity at input zero.
  double max = 1;  // Required.
}

message MinusErrorQualityFitness {
  // Clip the output at `min`. A finite `min` is always used to avoid -infinity.
  double min = 1 [default = -1.0e100];

  // Clip the output at `max`. This is for fitness shaping. If not specified,
  // the fitness can be arbitrarily high.
  double max = 2;
}
