// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

// The spec for the dataset.

edition = "2023";

package brain.evolution.graphs.joy;

import "evolution/projects/graphs/joy/data.proto";
import "evolution/projects/graphs/joy/ground_truth_spec.proto";

message DatasetSpec {
  oneof dataset_type {
    FixedDatasetSpec fixed = 5;
    RandomDatasetSpec random = 6;
    FullBfloat16DatasetSpec full_bfloat16 = 7;
  }
}

message FixedDatasetSpec {
  // There will be inputs will be distributed linearly between `inputs_min` and
  // `inputs_max`.
  double inputs_min = 1;  // Required.

  double inputs_max = 2;  // Required.

  int64 num_inputs = 3;  // Required.

  bool inputs_min_inclusive = 4 [default = true];

  bool inputs_max_inclusive = 5 [default = true];

  FloatDTypeSpec inputs_dtype = 6;  // Required.

  GroundTruthSpec ground_truth = 7;  // Required.

  // Non-negative value that will be added to the absolute value of the
  // denominator. This is to optionally avoid division by zero.
  double relative_error_epsilon = 8 [default = 0.0];

  // Whether to measure the error in ULPs (i.e. relative to 1 ULP of the label).
  // Otherwise, measures error relative to the mangnitude of the label.
  bool measure_ulp = 9;  // Required.

  // If set, can override the dtype for measuring ULPs. For example, the input
  // can be float64s and this can be float32, which will cause the computations
  // to take place in float64 but the error to be measured in float32 ULPs.
  FloatDTypeSpec override_ulp_dtype = 10;

  // If set, this is the value x s.t. all ulp values will be replaced with
  // ulp(x).
  double override_ulp_with_value_at = 11;
}

message RandomDatasetSpec {
  // If seed not specified, random seed will be chosen using GenerateRNGSeed()
  int64 seed = 1;

  // The inputs will be distributed uniform randomly between `inputs_min` and
  // `inputs_max`.
  double inputs_min = 2;  // Required.

  double inputs_max = 3;  // Required.

  int64 num_inputs = 4;  // Required.

  bool inputs_min_inclusive = 5 [default = true];

  bool inputs_max_inclusive = 6 [default = true];

  FloatDTypeSpec inputs_dtype = 7;  // Required.

  GroundTruthSpec ground_truth = 8;  // Required.

  // Non-negative value that will be added to the absolute value of the
  // denominator. This is to optionally avoid division by zero.
  double relative_error_epsilon = 9 [default = 0.0];

  // Whether to measure the error in ULPs (i.e. relative to 1 ULP of the label).
  // Otherwise, measures error relative to the mangnitude of the label.
  bool measure_ulp = 10;  // Required.

  // If set, can override the dtype for measuring ULPs. For example, the input
  // can be float64s and this can be float32, which will cause the computations
  // to take place in float64 but the error to be measured in float32 ULPs.
  FloatDTypeSpec override_ulp_dtype = 11;

  // If set, this is the value x s.t. all ulp values will be replaced with
  // ulp(x).
  double override_ulp_with_value_at = 12;
}

message FullBfloat16DatasetSpec {
  // Generate all the possible inputs for bfloat16 in the given range.
  double inputs_min = 1;  // Required.

  double inputs_max = 2;  // Required.

  int64 skip_every = 3 [default = 1];

  bool inputs_min_inclusive = 4 [default = true];

  bool inputs_max_inclusive = 5 [default = true];

  GroundTruthSpec ground_truth = 6;  // Required.

  // Non-negative value that will be added to the absolute value of the
  // denominator. This is to optionally avoid division by zero.
  double relative_error_epsilon = 7 [default = 0.0];

  // Whether to measure the error in ULPs (i.e. relative to 1 ULP of the label).
  // Otherwise, measures error relative to the mangnitude of the label.
  bool measure_ulp = 8;  // Required.

  // If set, can override the dtype for measuring ULPs. For example, the input
  // can be float64s and this can be float32, which will cause the computations
  // to take place in float64 but the error to be measured in float32 ULPs.
  FloatDTypeSpec override_ulp_dtype = 9;

  // If set, this is the value x s.t. all ulp values will be replaced with
  // ulp(x).
  double override_ulp_with_value_at = 10;
}
